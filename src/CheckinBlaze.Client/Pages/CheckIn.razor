@page "/checkin"
@using CheckinBlaze.Client.Services
@using CheckinBlaze.Shared.Models
@using Microsoft.AspNetCore.Authorization
@inject CheckInService CheckInService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<h3>Check In</h3>

<div class="alert alert-info" role="alert">
    Your current location will be used for the check-in. Please ensure location services are enabled.
</div>

@if (isLoading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label for="status" class="form-label">Status</label>
                <select class="form-select" id="status" @bind="status">
                    @foreach (var value in Enum.GetValues(typeof(SafetyStatus)))
                    {
                        <option value="@value">@value</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="precision" class="form-label">Location Precision</label>
                <select class="form-select" id="precision" @bind="precision" @bind:after="UpdateLocationRadius">
                    @foreach (var value in Enum.GetValues(typeof(LocationPrecision)))
                    {
                        <option value="@value">@value</option>
                    }
                </select>
                <small class="form-text text-muted">
                    @(precision == LocationPrecision.CityWide 
                        ? "Your location will be shown at city level accuracy" 
                        : "Your exact location will be recorded")
                </small>
            </div>

            <div class="mb-3">
                <label for="notes" class="form-label">Notes</label>
                <textarea class="form-control" id="notes" rows="3" @bind="notes"></textarea>
            </div>
            
            @if (latitude.HasValue && longitude.HasValue)
            {
                <div class="mb-3">
                    <div class="card">
                        <div class="card-header">Location Details</div>
                        <div class="card-body">
                            <p><strong>Coordinates:</strong> @latitude.Value.ToString("F6"), @longitude.Value.ToString("F6")</p>
                            <p><strong>City/Region:</strong> @(city ?? "Loading...")</p>
                        </div>
                    </div>
                </div>
            }

            @if (errorMessage != null)
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <button class="btn btn-primary" @onclick="SubmitCheckInAsync" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Submitting...</span>
                }
                else
                {
                    <span>Submit Check-In</span>
                }
            </button>
        </div>

        @if (latitude.HasValue && longitude.HasValue)
        {
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Your Location</h5>
                    </div>
                    <div class="card-body p-0">
                        <div id="map" style="height: 400px;"></div>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">
                            @(precision == LocationPrecision.CityWide 
                                ? "Showing approximate city-wide location" 
                                : "Showing exact location")
                        </small>
                        <div>
                            <strong>Coordinates:</strong> @latitude, @longitude
                        </div>
                        <div>
                            <strong>City:</strong> @city
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? errorMessage;
    private double? latitude;
    private double? longitude;
    private string? notes;
    private SafetyStatus status = SafetyStatus.OK;
    private LocationPrecision precision = LocationPrecision.Precise;
    private string? city = "Seattle, WA"; // Default city for now

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetLocationAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error getting location: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && latitude.HasValue && longitude.HasValue)
        {
            await InitializeMapAsync();
        }
    }

    private async Task InitializeMapAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Initializing map...");
            await JSRuntime.InvokeVoidAsync("initializeMap");
            await UpdateLocationRadius();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing map: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", $"Error initializing map: {ex.Message}");
        }
    }

    private async Task UpdateLocationRadius()
    {
        if (latitude.HasValue && longitude.HasValue)
        {
            try
            {
                // Update the map with new marker and radius
                await JSRuntime.InvokeVoidAsync("console.log", "Updating location...");
                await JSRuntime.InvokeVoidAsync("updateCheckInLocation", 
                    latitude.Value, 
                    longitude.Value,
                    precision == LocationPrecision.Precise,
                    precision == LocationPrecision.Precise ? 100 : 5000);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error updating location: {ex.Message}";
                await JSRuntime.InvokeVoidAsync("console.error", $"Error updating location: {ex.Message}");
            }
        }
    }

    private async Task GetLocationAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Getting location...");
            var location = await JSRuntime.InvokeAsync<GeolocationResult>("getCurrentPosition");
            
            if (location != null)
            {
                latitude = location.Latitude;
                longitude = location.Longitude;
                await JSRuntime.InvokeVoidAsync("console.log", $"Got location: {latitude}, {longitude}");
                
                // In a real app, we would use a geocoding service to get the city
                // For now, we'll hardcode it based on the coordinates
                if (latitude > 47 && latitude < 48 && longitude > -123 && longitude < -122)
                {
                    city = "Seattle, WA";
                }
                else
                {
                    city = "Unknown Location";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error getting location: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", $"Error getting location: {ex.Message}");
        }
    }

    private async Task SubmitCheckInAsync()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;

            var checkIn = await CheckInService.SubmitCheckInAsync(
                latitude,
                longitude,
                notes,
                status,
                precision
            );

            if (checkIn != null)
            {
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error submitting check-in: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private class GeolocationResult
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}